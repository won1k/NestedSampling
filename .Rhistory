return(logdensities)
}
# target parameters
target_parameters <- list(prior_prob = 1/2, means = c(0, 2), sds = c(1,1), nsamples = 100)
# group all the objects relating to the problem in one list
target <- list(dimension = 1, rprior = rprior, dprior = dprior, loglikelihood = loglikelihood, loglikelihood_all = loglikelihood_all, parameters = target_parameters)
N <- 100 # number of simulation runs
datalength <- 100
tuning_parameters <- list(f = 0.01, nparticles = 10^2, nestimates = 100)
#'
#' Generate observations + compute evidence
#'
lambda <- rbinom(datalength, 1, 0.3) # actual p = 0.3
observations <- matrix(rnorm(datalength, mean = target$parameters$means[lambda+1], sd = target$parameters$sds[lambda+1]), ncol = 1)
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)
# IS, NS-det, NS-rand computation
IS.2g.log.evidences <- rep(0, N)
NS.det.2g.log.evidences <- rep(0, N)
NS.det.2g.iterations <- rep(0, N)
NS.rand.2g.log.evidences <- rep(0, N)
NS.rand.2g.iterations <- rep(0, N)
for (i in 1:N) {
IS.results <- SIS(observations, tuning_parameters, target)
IS.2g.log.evidences[i] <- IS.results$log_evidences[datalength]
cat("IS step",i, "complete\n")
# 4a. NS log evidence
NS.results <- NS_det(observations, tuning_parameters, target)
NS.det.2g.log.evidences[i] <- log(NS.results$evidence)
NS.det.2g.iterations[i] <- NS.results$iterations
cat("NS-det step",i, "complete\n")
# 4b. NS-rand log evidence
NS.rand.results <- NS_rand(observations, tuning_parameters, target)
NS.rand.2g.log.evidences[i] <- NS.rand.results$log.evidence
NS.rand.2g.iterations[i] <- NS.rand.results$iterations
cat("NS-rand step",i, "complete\n")
}
means[c(1,2,1,2,2,1,2)]
loglikelihood <- function(thetaparticles, observation, parameters){
nparticles <- length(thetaparticles[,1])
logdensities <- rep(0, nparticles)
for (i in 1:nparticles) logdensities[i] <- dnorm(observation, mean = parameters$means[thetaparticles[i,1]], sd = parameters$sds[thetaparticles[i,1]], log = TRUE)
return(logdensities)
}
target_parameters <- list(prior_prob = 1/2, means = c(0, 2), sds = c(1,1), nsamples = 100)
# group all the objects relating to the problem in one list
target <- list(dimension = 1, rprior = rprior, dprior = dprior, loglikelihood = loglikelihood, loglikelihood_all = loglikelihood_all, parameters = target_parameters)
for (i in 1:N) {
IS.results <- SIS(observations, tuning_parameters, target)
IS.2g.log.evidences[i] <- IS.results$log_evidences[datalength]
cat("IS step",i, "complete\n")
# 4a. NS log evidence
NS.results <- NS_det(observations, tuning_parameters, target)
NS.det.2g.log.evidences[i] <- log(NS.results$evidence)
NS.det.2g.iterations[i] <- NS.results$iterations
cat("NS-det step",i, "complete\n")
# 4b. NS-rand log evidence
NS.rand.results <- NS_rand(observations, tuning_parameters, target)
NS.rand.2g.log.evidences[i] <- NS.rand.results$log.evidence
NS.rand.2g.iterations[i] <- NS.rand.results$iterations
cat("NS-rand step",i, "complete\n")
}
rprior <- function(nparticles, parameters){
particles <- rbinom(nparticles, 1, parameters$prior_prob) + 1
return(matrix(particles, ncol = 1))
}
# target parameters
target_parameters <- list(prior_prob = 1/2, means = c(0, 2), sds = c(1,1), nsamples = 100)
# group all the objects relating to the problem in one list
target <- list(dimension = 1, rprior = rprior, dprior = dprior, loglikelihood = loglikelihood, loglikelihood_all = loglikelihood_all, parameters = target_parameters)
for (i in 1:N) {
IS.results <- SIS(observations, tuning_parameters, target)
IS.2g.log.evidences[i] <- IS.results$log_evidences[datalength]
cat("IS step",i, "complete\n")
# 4a. NS log evidence
NS.results <- NS_det(observations, tuning_parameters, target)
NS.det.2g.log.evidences[i] <- log(NS.results$evidence)
NS.det.2g.iterations[i] <- NS.results$iterations
cat("NS-det step",i, "complete\n")
# 4b. NS-rand log evidence
NS.rand.results <- NS_rand(observations, tuning_parameters, target)
NS.rand.2g.log.evidences[i] <- NS.rand.results$log.evidence
NS.rand.2g.iterations[i] <- NS.rand.results$iterations
cat("NS-rand step",i, "complete\n")
}
matrix(nrow = 100, ncol = 1)
theta_samp <- matrix(nrow = n, ncol = target$dimension)
theta_samp
theta_samp[1,]
rbind(theta_samp[1:n,])
rbind(theta_samp[1:n,], matrix(nrow = 100, ncol = 1))
theta_samp[1:n]
theta_samp[1:n,n]
theta_samp[1:n,]
?rbind
library(distr)
#' Deterministic implementation (\Delta x = e^{-i/nparticles}) of nested sampling for nparticlesormal-nparticlesormal example
#' rprior = function to sample from prior; nparticles is number of alive particles; f is precision of estimate
#' target = list of parameters and functions for problem
#'
NS_det <- function(observations, tuning_parameters, target) {
# Setup parameters
datalength <- length(observations)
n <- 100
lf <- log(tuning_parameters$f)
nparticles <- tuning_parameters$nparticles
# Minimum log-likelihood of alive particles
lphi <- min(ll)
theta_samp <- matrix(nrow = n, ncol = target$dimension)
# Sample alive theta particles
theta <- target$rprior(nparticles, target$parameters)
t = 1
# Log-likelihood vector for alive thetas
ll <- rep(0, nparticles)
for(j in 1:nparticles) ll[j] <- sum(target$loglikelihood_all(theta[j,], observations, target$parameters))
# select minimum log-likelihood
lphi[t] <- min(ll)
i <- which(ll == lphi[t])[1]
theta_samp <- matrix(theta[i,], nrow = 1, ncol = target$dimension)
# Evaluate evidence
Z <- exp(lphi[t]) * (1-exp(-t/nparticles))
while( max(ll[-i]) - t/nparticles > lf + log(Z)) {
t <- t+1
# Sample new alive theta; MC until within desired region
theta[i,] <- rprior(1, target$parameters)
while(sum(target$loglikelihood_all(theta[i,], observations, target$parameters)) < lphi[t-1]) {
theta[i,] <- rprior(1, target$parameters)
}
# Compute likelihood and select minimum
ll[i] <- sum(target$loglikelihood_all(theta[i,], observations, target$parameters))
lphi <- c(lphi, min(ll))
i <- which(ll == lphi[t])[1]
theta_samp <- rbind(theta_samp, theta[i,])
# Incrementally update evidence Z
Z <- Z + exp(lphi[t]) * (exp(-(t-1)/nparticles) - exp(-t/nparticles))
}
# Add remainder to Z
mean_remainder <- mean(exp(ll[-i]))
Z <- Z + mean_remainder * exp(-(t+1)/N)
# Compile output
output <- list()
output$evidence <- Z
output$iterations <- t
output$log_incremental_evidence <- lphi
output$theta <- theta_samp
return(output)
}
for (i in 1:N) {
IS.results <- SIS(observations, tuning_parameters, target)
IS.2g.log.evidences[i] <- IS.results$log_evidences[datalength]
cat("IS step",i, "complete\n")
# 4a. NS log evidence
NS.results <- NS_det(observations, tuning_parameters, target)
NS.det.2g.log.evidences[i] <- log(NS.results$evidence)
NS.det.2g.iterations[i] <- NS.results$iterations
cat("NS-det step",i, "complete\n")
# 4b. NS-rand log evidence
NS.rand.results <- NS_rand(observations, tuning_parameters, target)
NS.rand.2g.log.evidences[i] <- NS.rand.results$log.evidence
NS.rand.2g.iterations[i] <- NS.rand.results$iterations
cat("NS-rand step",i, "complete\n")
}
plot(IS.2g.log.evidences, type = "l", col = 2, lty = 2, ylim = c(-207.5, -206.5), main = "IS vs NS Evidence Estimation, 2-Gaussian Mixture, 10^2 Particles, f = 0.01", xlab = "", ylab = "Log-Evidence")
lines(NS.det.2g.log.evidences, lty = 5, col = 3)
plot(IS.2g.log.evidences, type = "l", col = 2, lty = 2,, main = "IS vs NS Evidence Estimation, 2-Gaussian Mixture, 10^2 Particles, f = 0.01", xlab = "", ylab = "Log-Evidence")
lines(NS.det.2g.log.evidences, lty = 5, col = 3)
lines(NS.rand.2g.log.evidences, lty = 4, col = 4)
abline(h = exact_log_evidence)
plot(IS.2g.log.evidences, type = "l", col = 2, lty = 2, ylim = c(-207, -206), main = "IS vs NS Evidence Estimation, 2-Gaussian Mixture, 10^2 Particles, f = 0.01", xlab = "", ylab = "Log-Evidence")
lines(NS.det.2g.log.evidences, lty = 5, col = 3)
lines(NS.rand.2g.log.evidences, lty = 4, col = 4)
plot(IS.2g.log.evidences, type = "l", col = 2, lty = 2, ylim = c(-207.5, -206.2), main = "IS vs NS Evidence Estimation, 2-Gaussian Mixture, 10^2 Particles, f = 0.01", xlab = "", ylab = "Log-Evidence")
lines(NS.det.2g.log.evidences, lty = 5, col = 3)
lines(NS.rand.2g.log.evidences, lty = 4, col = 4)
abline(h = exact_log_evidence)
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)
source('~/R/NS/comparisons_gaus_mixture.R', echo=TRUE)
plot(IS.2g.log.evidences, type = "l", col = 2, lty = 2, ylim = c(-207.5, -206.2), main = "IS vs NS Evidence Estimation, 2-Gaussian Mixture, 10^2 Particles, f = 0.01", xlab = "", ylab = "Log-Evidence")
lines(NS.det.2g.log.evidences, lty = 5, col = 3)
lines(NS.rand.2g.log.evidences, lty = 4, col = 4)
abline(h = exact_log_evidence)
# IS, NS-det, NS-rand computation
IS.2g.log.evidences <- rep(0, N)
NS.det.2g.log.evidences <- rep(0, N)
NS.det.2g.iterations <- rep(0, N)
NS.rand.2g.log.evidences <- rep(0, N)
NS.rand.2g.iterations <- rep(0, N)
for (i in 1:N) {
IS.results <- SIS(observations, tuning_parameters, target)
IS.2g.log.evidences[i] <- IS.results$log_evidences[datalength]
cat("IS step",i, "complete\n")
# 4a. NS log evidence
NS.results <- NS_det(observations, tuning_parameters, target)
NS.det.2g.log.evidences[i] <- log(NS.results$evidence)
NS.det.2g.iterations[i] <- NS.results$iterations
cat("NS-det step",i, "complete\n")
# 4b. NS-rand log evidence
NS.rand.results <- NS_rand(observations, tuning_parameters, target)
NS.rand.2g.log.evidences[i] <- NS.rand.results$log.evidence
NS.rand.2g.iterations[i] <- NS.rand.results$iterations
cat("NS-rand step",i, "complete\n")
}
plot(IS.2g.log.evidences, type = "l", col = 2, lty = 2, ylim = c(-207.5, -206.2), main = "IS vs NS Evidence Estimation, 2-Gaussian Mixture, 10^2 Particles, f = 0.01", xlab = "", ylab = "Log-Evidence")
lines(NS.det.2g.log.evidences, lty = 5, col = 3)
lines(NS.rand.2g.log.evidences, lty = 4, col = 4)
abline(h = exact_log_evidence)
plot(IS.2g.log.evidences, type = "l", col = 2, lty = 2,main = "IS vs NS Evidence Estimation, 2-Gaussian Mixture, 10^2 Particles, f = 0.01", xlab = "", ylab = "Log-Evidence")
lines(NS.det.2g.log.evidences, lty = 5, col = 3)
lines(NS.rand.2g.log.evidences, lty = 4, col = 4)
abline(h = exact_log_evidence)
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)
# IS, NS-det, NS-rand computation
IS.2g.log.evidences <- rep(0, N)
NS.det.2g.log.evidences <- rep(0, N)
NS.det.2g.iterations <- rep(0, N)
NS.rand.2g.log.evidences <- rep(0, N)
NS.rand.2g.iterations <- rep(0, N)
for (i in 1:N) {
IS.results <- SIS(observations, tuning_parameters, target)
IS.2g.log.evidences[i] <- IS.results$log_evidences[datalength]
cat("IS step",i, "complete\n")
# 4a. NS log evidence
NS.results <- NS_det(observations, tuning_parameters, target)
NS.det.2g.log.evidences[i] <- log(NS.results$evidence)
NS.det.2g.iterations[i] <- NS.results$iterations
cat("NS-det step",i, "complete\n")
# 4b. NS-rand log evidence
NS.rand.results <- NS_rand(observations, tuning_parameters, target)
NS.rand.2g.log.evidences[i] <- NS.rand.results$log.evidence
NS.rand.2g.iterations[i] <- NS.rand.results$iterations
cat("NS-rand step",i, "complete\n")
}
mean(IS.2g.log.evidences) # -206.76
mean(NS.det.2g.log.evidences) # -207.07
mean(NS.rand.2g.log.evidences) # -207.03
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)
MC_evidence_known_means(observations, target$parameters)$log_evidence
MC_evidence_known_means(observations, target$parameters)$log_evidence
MC_evidence_known_means(observations, target$parameters)$log_evidence
MC_evidence_known_means(observations, target$parameters)$log_evidence
MC_evidence_known_means(observations, target$parameters)$log_evidence
MC_evidence_known_means(observations, target$parameters)$log_evidence
MC_evidence_known_means(observations, target$parameters)$log_evidence
MC_evidence_known_means(observations, target$parameters)$log_evidence
MC_evidence_known_means(observations, target$parameters)$log_evidence
MC_evidence_known_means(observations, target$parameters)$log_evidence
MC_evidence_known_means(observations, target$parameters)$log_evidence
MC_evidence_known_means(observations, target$parameters)$log_evidence
MC_evidence_known_means(observations, target$parameters)$log_evidence
MC_evidence_known_means(observations, target$parameters)$log_evidence
MC_evidence_known_means(observations, target$parameters)$log_evidence
#'
#' Setup of simulation parameters and tuning parameters
#'
N <- 100 # number of simulation runs
datalength <- 100
tuning_parameters <- list(f = 0.01, nparticles = 10^2, nestimates = 100)
#'
#' Generate observations + compute evidence
#'
lambda <- rbinom(datalength, 1, 0.3) # actual p = 0.3
observations <- matrix(rnorm(datalength, mean = target$parameters$means[lambda+1], sd = target$parameters$sds[lambda+1]), ncol = 1)
# Exact evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)
# IS, NS-det, NS-rand computation
IS.2g.log.evidences <- rep(0, N)
NS.det.2g.log.evidences <- rep(0, N)
NS.det.2g.iterations <- rep(0, N)
NS.rand.2g.log.evidences <- rep(0, N)
NS.rand.2g.iterations <- rep(0, N)
for (i in 1:N) {
IS.results <- SIS(observations, tuning_parameters, target)
IS.2g.log.evidences[i] <- IS.results$log_evidences[datalength]
cat("IS step",i, "complete\n")
# 4a. NS log evidence
NS.results <- NS_det(observations, tuning_parameters, target)
NS.det.2g.log.evidences[i] <- log(NS.results$evidence)
NS.det.2g.iterations[i] <- NS.results$iterations
cat("NS-det step",i, "complete\n")
# 4b. NS-rand log evidence
NS.rand.results <- NS_rand(observations, tuning_parameters, target)
NS.rand.2g.log.evidences[i] <- NS.rand.results$log.evidence
NS.rand.2g.iterations[i] <- NS.rand.results$iterations
cat("NS-rand step",i, "complete\n")
}
# Plot simulations
plot(IS.2g.log.evidences, type = "l", col = 2, lty = 2,main = "IS vs NS Evidence Estimation, 2-Gaussian Mixture, 10^2 Particles, f = 0.01", xlab = "", ylab = "Log-Evidence")
lines(NS.det.2g.log.evidences, lty = 5, col = 3)
lines(NS.rand.2g.log.evidences, lty = 4, col = 4)
abline(h = exact_log_evidence)
abline(h = exact_MC_evidence_known_means)
#'
#' MC computation of exact evidence for mixture Gaussians
#'
#'
#' Known means, known variances
#' \lambda ~ Bern(p)
#' y|\lambda = i ~ N(\mu_i, \sigma_i^2) = N(target$parameters$means[i], target$parameters$sds[i])
#'
#' p(y) = \sum_{\lambda} p(y|\lambda)p(\lambda)
#'
#' Sample: \lambda ~ Bern(p)
#' Compute: Z_j = p(y|\lambda) p(\lambda) = p(y|\lambda) * 2^{-100}
#' Estimate: Z \approx (1/N) * sum(Z_j)
MC_evidence_known_means <- function(observations, parameters) {
# Set up parameters
nsamples <- parameters$nsamples
prior_prob <- parameters$prior_prob
means <- parameters$means
sds <- parameters$sds
n <- length(observations)
# Array of inner integrals
inner.sums <- rep(0, nsamples)
# Compute inner integrals for MC simulated lambda
for (i in 1:nsamples) {
lambda <- rbinom(n, 1, prior_prob) + 1
n.1 <- length(lambda[lambda == 1])
n.2 <- length(lambda[lambda == 2])
rows.1 <- which(lambda == 1)
rows.2 <- which(lambda == 2)
mean.obs.1 <- mean(observations[rows.1,1])
mean.obs.2 <- mean(observations[rows.2,1])
var.obs.1 <- var(observations[rows.1,1])
var.obs.2 <- var(observations[rows.2,1])
# Compute MC sum
inner.sums[i] <- (2*pi*sds[1]^2)^(-n.1/2) * (2*pi*sds[2]^2)^(-n.2/2) * exp(-1/(2*sds[1]^2)*((n.1-1)*var.obs.1 +
n.1*(mean.obs.1-means[1])^2) - 1/(2*sds[2]^2)*((n.2-1)*var.obs.2 + n.2*(mean.obs.2-means[2])^2))
}
log.inner.sums <- log(inner.sums)
# Remove extreme outliers
#qnt <- quantile(log.inner.integrals, probs = c(.25, .75), na.rm = TRUE)
#H <- 1.5 * IQR(x, na.rm = TRUE)
#log.inner.integrals <- log.inner.integrals[log.inner.integrals > (qnt[1] - H) & log.inner.integrals < (qnt[2] + H)]
return(list(log_inner_sums = log.inner.sums, log_evidence = log(mean(inner.sums))))
}
# Unknown means, known variances
# \lambda ~ Bern(p)
# \mu_i ~ N(\theta, \tau^2) = N(hyper_mean, hyper_sd^2)
# y|\lambda, \mu_1, \mu_2 ~ N(\mu_i, \sigma_i^2) = N(\mu_i, obs_sd^2)
#
# p(y) = \int p(y|\lambda,\mu_1,\mu_2) p(\mu_1,\mu_2) p(\lambda)
#
# Sample \lambda ~ Bern(p) [N times]
# Compute: Z_j = p(y|\lambda,\mu_1,\mu_2) p(\mu_1) p(\mu_2)
# MC estimate: Z \approx (1/N) * sum(Z_j)
MC_evidence <- function(observations, parameters) {
# Set up parameters
nsamples <- parameters$nsamples
prior_prob <- parameters$prior_prob
hyper_mean <- parameters$hyper_mean
hyper_sd <- parameters$hyper_sd
obs_sd <- parameters$obs_sd
n <- length(observations)
# Array of inner integrals
inner.integrals <- rep(0, nsamples)
# Compute inner integrals for MC simulated lambda
for (i in 1:nsamples) {
lambda <- rbinom(n, 1, prior_prob) + 1
n.1 <- length(lambda[lambda == 1])
n.2 <- length(lambda[lambda == 2])
rows.1 <- which(lambda == 1)
rows.2 <- which(lambda == 2)
mean.obs.1 <- mean(observations[rows.1,1])
mean.obs.2 <- mean(observations[rows.2,1])
mu.t1 <- ((n.1*mean.obs.1)/(2*obs_sd^2) + hyper_mean/(2*hyper_sd^2))/(n.1/(2*obs_sd^2) + 1/(2*hyper_sd^2))
mu.t2 <- ((n.2*mean.obs.2)/(2*obs_sd^2) + hyper_mean/(2*hyper_sd^2))/(n.2/(2*obs_sd^2) + 1/(2*hyper_sd^2))
inner.integrals[i] <- (2*pi*obs_sd^2)^(-n/2) * (2*pi*hyper_sd^2)^(-1) * exp(-1/(2*obs_sd^2)*(sum(observations[rows.1]^2)-n.1*mean.obs.1^2 + sum(observations[rows.2]^2) - n.1*mean.obs.2^2) - (n.1/(2*obs_sd^2)*mean.obs.1^2 + hyper_mean^2/(2*hyper_sd^2) + n.2/(2*obs_sd^2)*mean.obs.2^2 + hyper_mean^2/(2*hyper_sd^2)) + (n.1/(2*obs_sd^2) + 1/(2*hyper_sd^2)) * mu.t1^2 + (n.2/(2*obs_sd^2) + 1/(2*hyper_sd^2)) * mu.t2^2) * (2*pi/(n.1/obs_sd^2 + 1/hyper_sd^2))^(-1/2) * (2*pi/(n.2/obs_sd^2 + 1/hyper_sd^2))^(-1/2)
}
log.inner.integrals <- log(inner.integrals)
# Remove extreme outliers
#qnt <- quantile(log.inner.integrals, probs = c(.25, .75), na.rm = TRUE)
#H <- 1.5 * IQR(x, na.rm = TRUE)
#log.inner.integrals <- log.inner.integrals[log.inner.integrals > (qnt[1] - H) & log.inner.integrals < (qnt[2] + H)]
return(list(log_inner_integrals = log.inner.integrals, log_evidence = mean(log.inner.integrals)))
}
MC_evidence_known_means(observations, target$parameters)$log_evidence
MC_evidence_known_means(observations, target$parameters)$log_evidence
MC_evidence_known_means(observations, target$parameters)$log_evidence
MC_evidence_known_means(observations, target$parameters)$log_evidence
MC_evidence_known_means(observations, target$parameters)$log_evidence
MC_evidence_known_means(observations, target$parameters)$log_evidence
MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)
legend(x = 0, y = -129.9, c("IS","NS-det","NS-rand"), lty = c(2,5,4), col = c(2,3,4))
abline(h = exact_MC_evidence_known_means)
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
plot(IS.2g.log.evidences, type = "l", col = 2, lty = 2, ylim = c(-195, -194), main = "IS vs NS Evidence Estimation, 2-Gaussian Mixture, 10^2 Particles, f = 0.01", xlab = "", ylab = "Log-Evidence")
lines(NS.det.2g.log.evidences, lty = 5, col = 3)
lines(NS.rand.2g.log.evidences, lty = 4, col = 4)
abline(h = exact_MC_evidence_known_means$log)
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
abline(h = exact_MC_evidence_known_means$log)
abline(h = exact_MC_evidence_known_means)
plot(IS.2g.log.evidences, type = "l", col = 2, lty = 2, ylim = c(-195.1, -194.1), main = "IS vs NS Evidence Estimation, 2-Gaussian Mixture, 10^2 Particles, f = 0.01", xlab = "", ylab = "Log-Evidence")
lines(NS.det.2g.log.evidences, lty = 5, col = 3)
lines(NS.rand.2g.log.evidences, lty = 4, col = 4)
abline(h = exact_MC_evidence_known_means)
legend(x = 0, y = -194.9, c("IS","NS-det","NS-rand"), lty = c(2,5,4), col = c(2,3,4))
var(IS.2g.log.evidences) # 0.00834
var(NS.det.2g.log.evidences) # 0.0188
var(NS.rand.2g.log.evidences) # 0.0159
exact_log_evidence # -206.77
mean(IS.2g.log.evidences) # -206.76
mean(NS.det.2g.log.evidences) # -207.07
mean(NS.rand.2g.log.evidences) # -207.03
exact_MC_evidence_known_means
IS.rmse <- sqrt(mean((IS.2g.log.evidences - exact_log_evidence)^2)) # 0.0915
NS.det.rmse <- sqrt(mean((NS.det.2g.log.evidences - exact_log_evidence)^2)) # 0.333
NS.rand.rmse <- sqrt(mean((NS.rand.2g.log.evidences - exact_log_evidence)^2)) # 0.292
sqrt(mean((IS.2g.log.evidences - exact_log_evidence)^2)) # 0.0915
sqrt(mean((NS.det.2g.log.evidences - exact_log_evidence)^2)) # 0.333
sqrt(mean((NS.rand.2g.log.evidences - exact_log_evidence)^2)) # 0.292
sqrt(mean((IS.2g.log.evidences - exact_MC_evidence_known_means)^2)) # 12.42
sqrt(mean((NS.det.2g.log.evidences - exact_MC_evidence_known_means)^2)) #
sqrt(mean((NS.rand.2g.log.evidences - exact_MC_evidence_known_means)^2)) # 0.292
tuning_parameters <- list(f = 0.01, nparticles = 10^2, nestimates = 100000)
target_parameters <- list(prior_prob = 1/2, means = c(0, 2), sds = c(1,1), nsamples = 10000)
target <- list(dimension = 1, rprior = rprior, dprior = dprior, loglikelihood = loglikelihood, loglikelihood_all = loglikelihood_all, parameters = target_parameters)
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
target_parameters <- list(prior_prob = 1/2, means = c(0, 2), sds = c(1,1), nsamples = 100000)
target <- list(dimension = 1, rprior = rprior, dprior = dprior, loglikelihood = loglikelihood, loglikelihood_all = loglikelihood_all, parameters = target_parameters)
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
# IS, NS-det, NS-rand computation
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
exact_MC_evidence_known_means <- MC_evidence_known_means(observations, target$parameters)$log_evidence
rm(list = ls())
